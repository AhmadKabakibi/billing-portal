(function () {

    angular
        .module('app')
        .controller('POsController', [
            '$mdEditDialog', '$q', '$scope', '$timeout', 'POsService',
            POsController
        ]);

    function POsController($mdEditDialog, $q, $scope, $timeout, POsService) {
        var vm = this;

        //PosService
        // Assume we have a $nutrition service that provides an API for communicating with the server
        $scope.options = {
            rowSelection: true,
            autoSelect: true,
            decapitate: false,
            largeEditDialog: false,
            boundaryLinks: false,
            limitSelect: true,
            pageSelect: true
        };


        $scope.limitOptions = [5, 10, 15, {
            label: 'All',
            value: function () {
                return $scope.pos ? $scope.pos.count : 0;
            }
        }];


        /*
         Details:
         Show the details in grid format. Below are the columns to show.
          Line This will be generated by our system and we should list the line items with the PO in the
         same order they were received in the PO export file.
          Item Code data element 0012
          Description data element 0013
          Warehouse code data element 0014
          Warehouse lookup this value using the warehouse code &amp; the “IM_Warehouse.xlsx” table
          Partner PO Number data element 0015
          Unit of measure data element 0016
          Quantity Ordered data element 0017
          Quantity backordered data element 0018
          Quantity invoiced data element 0019
          Unit Cost data element 0020
          Total data element 0021
         */

        // Order Information: This will include the PO header information.
        // for testing ngRepeat
        $scope.columnsFiles = [{
            name: 'File name'
        }, {
            name: 'Date received'
        }, {
            name: 'Status'
        }, {
            name: 'Failure reason'
        }, {
            name: 'Download'
        }];

        $scope.toggleLimitOptions = function () {
            $scope.limitOptions = $scope.limitOptions ? undefined : [5, 10, 15];
        };

        $scope.getTypes = function () {
            return ['Candy', 'Ice cream', 'Other', 'Pastry'];
        };

        $scope.onPaginate = function (page, limit) {
            console.log('Scope Page: ' + $scope.query.page + ' Scope Limit: ' + $scope.query.limit);
            console.log('Page: ' + page + ' Limit: ' + limit);

            $scope.promise = $timeout(function () {

            }, 2000);
        };

        $scope.deselect = function (item) {
            console.log(item.name, 'was deselected');
        };



        $scope.loadStuff = function () {
            $scope.promise = $timeout(function () {

            }, 2000);
        };

        $scope.onReorder = function (order) {

            console.log('Scope Order: ' + $scope.query.order);
            console.log('Order: ' + order);

            $scope.promise = $timeout(function () {

            }, 2000);
        };

        function removeDuplicate(arr, prop) {
            var new_arr = [];
            var lookup = {};
            for (var i in arr) {
                lookup[arr[i][prop]] = arr[i];
            }
            for (i in lookup) {
                new_arr.push(lookup[i]);
            }
            return new_arr;
        }

        /* function loadPOs(){

         POsService.loadAllItems()
         .then(function (response) {
         $scope.posHeader = response.data.data;
         }, function (error) {
         $scope.status = 'Unable to load partne  r data: ' + error.message;
         console.log($scope.status);
         });
         }
         loadPOs();*/


    }

})();
